{"version":3,"sources":["components/ControllerChat/ControllerChat.jsx","components/EntryToChat/EntryToChat.jsx","components/ListMessages/ListMessages.jsx","components/Container/Container.jsx","App.js","index.js"],"names":["ControllerChat","onSendMessage","onAddText","value","onSubmit","e","preventDefault","InputGroup","className","Form","Control","autoComplete","type","name","onChange","target","Button","variant","EntryToChat","connect","onAddUser","Row","Col","xs","placeholder","required","ListMessages","massages","map","item","messageClassName","user","nameChat","event","message","id","Container","children","App","useState","setMessages","setName","text","setText","conected","setConected","socket","useRef","showEntry","current","WebSocket","onopen","uuidv4","send","JSON","stringify","console","log","onmessage","parse","data","prevState","onclose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c39bec67.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const ControllerChat = ({ onSendMessage, onAddText, value }) => {\n  const handleSendMessage = (e) => {\n    e.preventDefault();\n    if (value === \"\") return;\n    onSendMessage();\n    onAddText(\"\");\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSendMessage}>\n        <InputGroup className=\"mt-2\">\n          <Form.Control\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"text\"\n            value={value}\n            onChange={(e) => onAddText(e.target.value)}\n          />\n          <Button type=\"submit\" variant=\"success\">\n            Отправить\n          </Button>\n        </InputGroup>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const EntryToChat = ({ connect, onAddUser, value }) => {\n  const handleAddName = (e) => {\n    e.preventDefault();\n    connect();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleAddName}>\n        <Row>\n          <Col xs={9}>\n            <Form.Control\n              autoComplete=\"off\"\n              type=\"text\"\n              placeholder=\"введите имя\"\n              value={value}\n              onChange={(e) => onAddUser(e.target.value)}\n              required\n            />\n          </Col>\n          <Col xs={3}>\n            <Button type=\"submit\">Войти</Button>\n          </Col>\n        </Row>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./ListMessages.scss\";\n\nexport const ListMessages = ({ massages, name }) => {\n  return (\n    <div className=\"windows-massages\">\n      {massages.map((item) => {\n        const messageClassName = item.user === name ? \"your\" : \"user\";\n        const nameChat = item.user === name ? \"Вы\" : item.user;\n\n        return item.event === \"connect\" ? (\n          <p className=\"windows-massages__message windows-massages__message--connect \">{`Подключился пользователь ${item.user}`}</p>\n        ) : (\n          <p\n            key={item.id}\n            className={`windows-massages__message windows-massages__message--${messageClassName}-message`}\n          >\n            {`${nameChat}: ${item.message}`}\n          </p>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Container.scss\";\n\nexport const Container = ({ children }) => {\n  return <div className=\"container\">{children}</div>;\n};\n","import { useState, useRef } from \"react\";\n\nimport { ControllerChat } from \"./components/ControllerChat\";\nimport { EntryToChat } from \"./components/EntryToChat\";\nimport { ListMessages } from \"./components/ListMessages\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Container } from \"./components/Container\";\n\nconst App = () => {\n  const [massages, setMessages] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [conected, setConected] = useState(false);\n  const socket = useRef();\n\n  const connection = () => {\n    socket.current = new WebSocket(\"/\");\n\n    socket.current.onopen = () => {\n      const message = {\n        event: \"connect\",\n        user: name,\n        id: uuidv4(),\n      };\n      setConected(true);\n\n      socket.current.send(JSON.stringify(message));\n      console.log(\"Соеденение установлено!\");\n    };\n\n    socket.current.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      setMessages((prevState) => [...prevState, message]);\n    };\n    socket.current.onclose = (event) => {\n      console.log(\"Соеденение закрыто\");\n    };\n  };\n\n  const handleSendMessage = () => {\n    const message = {\n      event: \"message\",\n      user: name,\n      message: text,\n      id: uuidv4(),\n    };\n\n    socket.current.send(JSON.stringify(message));\n  };\n\n  const showEntry = name && conected;\n  return (\n    <Container>\n      <h2>Добро пожаловать в чат</h2>\n      {!showEntry && (\n        <EntryToChat connect={connection} onAddUser={setName} value={name} />\n      )}\n      {conected && <ListMessages massages={massages} name={name} />}\n\n      {conected && (\n        <ControllerChat\n          onAddText={setText}\n          onSendMessage={handleSendMessage}\n          value={text}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}